Function Test-Credential{
    param( 
        [Parameter(Mandatory=$true)]
        [ValidateNotNull()] 
        [System.Management.Automation.PSCredential]
        [System.Management.Automation.Credential()] 
        $Credentials,
        [Parameter(Mandatory = $false)]
        $Server,
        [Parameter(Mandatory = $false)]
        [string]$Domain = $env:USERDOMAIN
    )
    Add-Type -AssemblyName System.DirectoryServices.AccountManagement
    
    $contextType = [System.DirectoryServices.AccountManagement.ContextType]::Domain

     if($Credentials.UserName -match '(?<Domain>.+?)\\(?<UserName>.*$)'){
        $Domain = $Matches.Domain
        $UserName = $Matches.UserName
     }else{
        $UserName = $Credentials.UserName
     }    
    
    $argumentList = New-Object -TypeName "System.Collections.ArrayList"
    $null = $argumentList.Add($contextType)
    $null = $argumentList.Add($Domain)
    if($null -ne $Server){
        $argumentList.Add($Server)
    }
    
    $principalContext = New-Object System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList $argumentList -ErrorAction SilentlyContinue
    if ($null -eq $principalContext) {
        Write-Warning "$Domain\$($Credentials.UserName) - AD Authentication failed"
    }
    
    if ($principalContext.ValidateCredentials($UserName, $Credentials.GetNetworkCredential().Password)) {
        Return $Credentials
    }else{
        Write-Warning "$Domain\$UserName - AD Authentication failed"
    }
}
